{{ ansible_managed | comment }}

cidr_networks:
  container: 172.29.236.0/24
  tunnel:    172.29.240.0/24
  storage:   172.29.244.0/24

used_ips:
  - 172.29.236.1,172.29.236.100
  - 172.29.240.1,172.29.240.100
  - 172.29.244.1,172.29.244.100

global_overrides:
  internal_lb_vip_address: 172.29.236.2
  external_lb_vip_address: 172.29.236.3
  tunnel_bridge: br-vxlan
  management_bridge: br-mgmt
  swift:
    part_power: 8
    repl_number: {{ nodes.storages }}
    storage_network: br-storage
    mount_point: /srv
    drives:
      - name: vdc
    storage_policies:
      - policy:
          name: gold
          index: 0
          default: True
  provider_networks:
    - network:
        group_binds:
          - all_containers
          - hosts
        type: raw
        container_bridge: br-mgmt
        container_interface: eth1
        container_type: veth
        ip_from_q: container
        is_container_address: true
        is_ssh_address: true

    - network:
        group_binds:
          - glance_api
          - cinder_api
          - cinder_volume
          - nova_compute
          - swift_proxy
        type: raw
        container_bridge: br-storage
        container_type: veth
        container_interface: eth2
        container_mtu: 9000
        ip_from_q: storage

    - network:
        group_binds:
          - neutron_linuxbridge_agent
        container_bridge: br-vxlan
        container_type: veth
        container_interface: eth10
        container_mtu: 9000
        ip_from_q: tunnel
        type: vxlan
        range: 1:1000
        net_name: vxlan

    # Unfortunately, having either "flat" or "vlan" network is mandatory
    # for OpenStack Ansible. So we define this one and use a dump bridge
    # that's not connected to any physical device.
    - network:
        group_binds:
          - neutron_linuxbridge_agent
        container_bridge: br-vlan
        container_type: veth
        container_interface: eth12
        type: flat
        net_name: flat

{% macro definehosts(type, name, amount, ipprefix, hostno) %}
{{ type }}:
{% for i in range(amount) %}
  {{ name }}{{ i + 1 }}:
    ip: {{ ipprefix }}{{ hostno + i }}
{% if type == 'storage_hosts' %}
    container_vars:
      cinder_backends:
        lvm:
          volume_backend_name: LVM_iSCSI
          volume_driver: cinder.volume.drivers.lvm.LVMVolumeDriver
          volume_group: cinder-volumes
          iscsi_ip_address: {{ ipprefix}}{{ hostno + i }}
        limit_container_types: cinder_volume
{% endif %}
{% endfor %}
{% endmacro %}

{{ definehosts('shared-infra_hosts', 'infra', nodes.controllers, '172.29.236.', 10) }}
{{ definehosts('repo-infra_hosts', 'infra', nodes.controllers, '172.29.236.', 10) }}
{{ definehosts('os-infra_hosts', 'infra', nodes.controllers, '172.29.236.', 10) }}
{{ definehosts('identity_hosts', 'infra', nodes.controllers, '172.29.236.', 10) }}
{{ definehosts('network_hosts', 'infra', nodes.controllers, '172.29.236.', 10) }}
{{ definehosts('storage-infra_hosts', 'infra', nodes.controllers, '172.29.236.', 10) }}
{{ definehosts('swift-proxy_hosts', 'infra', nodes.controllers, '172.29.236.', 10) }}
{{ definehosts('haproxy_hosts', 'infra', nodes.controllers, '172.29.236.', 10) }}
{{ definehosts('log_hosts', 'infra', 1, '172.29.236.', 10) }}

{{ definehosts('compute_hosts', 'compute', nodes.computes, '172.29.236.', 10 + nodes.controllers) }}

{{ definehosts('storage_hosts', 'storage', nodes.storages, '172.29.236.', 10 + nodes.controllers + nodes.computes) }}
{{ definehosts('swift_hosts', 'storage', nodes.storages, '172.29.236.', 10 + nodes.controllers + nodes.computes) }}
